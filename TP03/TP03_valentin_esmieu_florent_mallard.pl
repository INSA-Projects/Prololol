/**
TP Listes Prolog

@author Valentin ESMIEU
@author Florent MALLARD
@version Annee scolaire 2014-2015
*/

% ============================================================================= 
%	membre(?A,+X)
% =============================================================================

membre(A,[A|Y]).
membre(A,[X|Y]):- membre(A,Y).


% ============================================================================= 
%	compte(+A,+X,?N)
% =============================================================================

 compte(A,[],0).
 compte(A,[A|Y],N) :-
	compte(A,Y,M),
	N is M+1.
	

 compte(A,[X|Y],N) :-
	\==(X,A),
	compte(A,Y,N).


% ============================================================================= 
%	renverser(X,Y)
% =============================================================================

renverser(L,Y) :- renverser1(L,[],Y).
	
renverser1([],A,A).
renverser1([E|S],A,Y):- renverser1(S,[E|A],Y).


% =============================================================================
%	palind(X)
% =============================================================================

palind(X):- renverser(X,X).


% =============================================================================
%	nieme(N,X,A)
% =============================================================================

nieme(1,[A|R],A).
nieme(N,[E|R],A) :-
	M is N-1,
	nieme(M,R,A).
	

% =============================================================================
%	nieme(N,X,A)
% =============================================================================

hors_de(A,[]).
hors_de(A,[X|Y]):- 
	\==(X,A),
	hors_de(A,Y).


% =============================================================================
%	tous_diff(X)
% =============================================================================

tous_diff([]).
tous_diff([X|R]):- 
	hors_de(X,R),
	tous_diff(R).


% =============================================================================
%	conc3(X,Y,Z,T)
% =============================================================================

conc3([],[],Z,Z).
conc3([],[X|R],Z,[X|T]) :- conc3([],R,Z,T).
conc3([X|R],Y,Z,[X|T]) :- conc3(R,Y,Z,T).


% =============================================================================
%	debute_par(X,Y)
% =============================================================================

debute_par(X,[]).
debute_par([A|R1],[A|R2]):-debute_par(R1,R2).

% =============================================================================
%	sous_liste(X,Y)
% =============================================================================

sous_liste([X|L1],[X|L2]):- debute_par(L1,L2).
sous_liste([X|L1],[Y|L2]):- sous_liste(L1,[Y|L2]).

% =============================================================================
%	elim(X,Y)
% =============================================================================

elim(L1,L2) :- elim(L1,[],L2).

elim([],L,L).

elim([X|R],Acc,D) :-
	hors_de(X, Acc),
	elim(R,[X|Acc],D).

elim([X|R],Acc,D) :-
	membre(X,Acc),
	elim(R,Acc,D).

% =============================================================================
%	tri(X,Y)
% =============================================================================

inserer(E,[],[E]).
inserer(E,[X|L1],[X|L2]):- 
	E > X,
	inserer(E,L1,L2).


inserer(E,[X|L1],[E,X|L1]):- E < X.

tri(L1,L2) :-
	tri(L1,[],L2).

tri([],L,L).

tri([X|L1],Acc,R):-
	inserer(X,Acc,LT),
	tri(L1,LT,R).

% =============================================================================
%	inclus(X,Y)
% =============================================================================

inclus([],L2).
inclus([X|L1],L2):-
	membre(X,L2),
	inclus(L1,L2).

% =============================================================================
%	non_inclus(X,Y)
% =============================================================================
non_inclus([X|L1],L2):- hors_de(X,L2).
non_inclus([X|L1],L2):- 
	membre(X,L2),
	non_inclus(L1,L2).

% =============================================================================
%	union_ens(X,Y,Z)
% =============================================================================
union_ens(X,[],X).
union_ens([],Y,Y).
union_ens([X|L1],Y,[X|L2]):-
	hors_de(X,Y),
	union_ens(L1,Y,L2).
union_ens([X|L1],Y,Z):-
	membre(X,Z),
	union_ens(L1,Y,Z).
% =============================================================================



/* TESTS 

?-membre(1,[0,1,2,3]).
Yes

?-membre(54,[0,1,2,3]).
No

-------

?-compte(1,[1,1,1,2,5],N).
N = 3
Yes

?-compte(0,[1,1,1,2,5],N).
N = 0
Yes

---------

?-renverser([1,2,3,4],Y).
Y = [4, 3, 2, 1]
Yes

--------

?-palind([1,2,3,3,2,1]).
Yes 

?-palind([1,2,3,4,2,1]).
No

?-palind([1,2,3,2,1]).
Yes

--------

?-hors_de(5,[1,2,3,4]).
Yes

?-hors_de(2,[1,2,3,4]).
No

--------


?-tous_diff([1,2,3,4]).
Yes (0.00s cpu)

?-tous_diff([1,2,3,2]).
No

--------

?-conc3([1,2,3],[4,5,6],[],T).
T = [1, 2, 3, 4, 5, 6]
Yes

X = []
Y = []
Z = [1, 2, 3, 4, 5, 6]
Yes (0.00s cpu, solution 1, maybe more) ? ;

X = []
Y = [1]
Z = [2, 3, 4, 5, 6]
Yes (0.00s cpu, solution 2, maybe more) ? ;

--------

debute_par([1,2,3,4,5,6],[1,2,3]).
Yes (0.00s cpu)

debute_par([1,2,3,4,5,6],[1,2,4]).
No

----

sous_liste([1,2,3,4,5],[2,3,4]).
Yes 

sous_liste([1,2,3,4,5],Y).
Y = [1]
Y = [1, 2]
Y = [1, 2, 3]
...

sous_liste([1,2,3,4,5],[4,3]).
No 
------

elim([1,2,1,2],Y).
Y = [2, 1]
Yes

------

tri([1,3,5,4,2],L).

L = [1, 2, 3, 4, 5]
Yes

------

inclus([1,2],[1,2,3,4]).
Yes

inclus([10,20],[1,2,3,4]).
No
------

non_inclus([1,2],[1,2,3,4]).
No

non_inclus([10,20],[1,2,3,4]).
Yes

---- 

union_ens([1,2],[2,3,4],Z).
Z = [1, 2, 3, 4]
Yes

union_ens([1,2],[2,3,4],[1,2,3,4]).
Yes

union_ens([1,2],[2,3,4],[200]).
No

---- 

*/
